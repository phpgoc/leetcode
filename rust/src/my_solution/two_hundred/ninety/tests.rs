use std::time::Instant;

#[test]
fn word_pattern() {
    use super::word_pattern;
    assert!(word_pattern(
        String::from("abba"),
        String::from("dog cat cat dog")
    ));
}

#[test]
fn can_win_nim() {
    use super::one;
    assert!(!one::can_win_nim(4));
}

#[test]
#[allow(non_snake_case)]
fn MedianFinder() {
    use super::five;
    let mut m = five::MedianFinder::new();

    // m.add_num(4);
    // m.add_num(1);
    // m.add_num(2);
    // assert_eq!(m.find_median(), 2.0);
    // use five::use_btree_map::MedianFinder;
    use five::use_insertion::MedianFinder;

    let mut m3 = MedianFinder::new();
    let vec = vec![
        78, 14, 50, 20, 13, 9, 25, 8, 13, 37, 29, 33, 55, 52, 6, 17, 65, 23, 74, 43, 5, 29, 29, 72,
        7, 13, 56, 21, 31, 66, 69, 69, 74, 12, 77, 23, 10, 6, 27, 63, 77, 21, 40, 10, 19, 59, 35,
        40, 44, 4, 15, 29, 63, 27, 46, 56, 0, 60, 72, 35, 54, 50, 14, 29, 62, 24, 18, 79, 16, 19,
        8, 77, 10, 21, 66, 42, 76, 14, 58, 20, 0,
    ];
    for i in vec {
        m.add_num(i);
        m3.add_num(i);
    }
    //[null,null,78.00000,null,46.00000,null,50.00000,null,35.00000,null,20.00000,null,17.00000,null,20.00000,null,17.00000,null,14.00000,null,17.00000,null,20.00000,null,22.50000,null,25.00000,null,27.00000,null,25.00000,null,22.50000,null,25.00000,null,24.00000,null,25.00000,null,27.00000,null,25.00000,null,27.00000,null,29.00000,null,29.00000,null,29.00000,null,27.00000,null,29.00000,null,27.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,30.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000]
    //[null,null,78.00000,null,46.00000,null,50.00000,null,35.00000,null,20.00000,null,17.00000,null,20.00000,null,17.00000,null,14.00000,null,17.00000,null,20.00000,null,22.50000,null,25.00000,null,27.00000,null,25.00000,null,22.50000,null,25.00000,null,24.00000,null,25.00000,null,27.00000,null,25.00000,null,27.00000,null,29.00000,null,29.00000,null,29.00000,null,27.00000,null,29.00000,null,27.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,30.00000,null,31.00000,null,32.00000,null,31.00000,null,30.00000,null,31.00000,null,30.00000,null,29.00000,null,30.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000,null,29.00000]
    assert_eq!(m.find_median(), m3.find_median());

    let mut mm1 = five::MedianFinder::new();
    let mut mm2 = five::use_btree_map::MedianFinder::new();
    let mut mm3 = five::use_insertion::MedianFinder::new();
    let vec = vec![
        8, 51, 58, 58, 29, 80, 34, 29, 40, 35, 35, 16, 50, 37, 90, 98, 59, 93, 85, 14, 1, 83, 06,
        49, 71, 74, 30, 22, 17, 59, 06, 00, 96, 29, 50, 11, 16, 71, 8, 19, 32, 29, 01, 18, 3, 68,
        47, 02, 03, 84, 06, 69, 23, 8, 9, 21, 61, 44, 28, 21, 78, 32, 05, 2, 59, 08, 11, 91, 37,
        76, 4, 6, 54, 77, 50, 32, 64, 91, 67, 58, 31, 87, 23, 74, 21, 82, 3, 77, 95, 59, 49, 0, 95,
        95, 14, 4, 84, 8, 27, 4, 09, 83, 9, 34, 27, 30, 09, 68, 5, 42, 80, 21, 89, 03, 4, 86, 75,
        04, 21, 81, 09, 78, 80, 94, 87, 18, 61, 19, 55, 36, 87, 50, 09, 86, 99, 89, 5, 4, 16, 07,
        80, 27, 86, 35, 33, 72, 63, 49, 50, 16, 29, 07, 27, 06, 95, 37, 69, 85, 46, 06, 22, 15, 40,
        66, 17, 72, 40, 85, 39, 92, 83, 73, 88, 30, 95, 17, 21, 46, 63, 13, 11, 90, 51, 21, 6, 99,
        9, 42, 44, 7, 70, 14, 6, 38, 79, 70, 87, 13, 70, 46, 47, 81, 57, 82, 12, 88, 6, 76, 81, 4,
        61, 70, 50, 32, 92, 53, 82, 68, 33, 75, 86, 69, 02, 66, 43, 46, 4, 12, 40, 97, 20, 45, 36,
        12, 97, 35, 3, 2, 09, 28, 4, 19, 5, 03, 78, 67, 7, 85, 40, 15, 33, 28, 38, 42, 60, 1, 0,
        77, 48, 13, 3, 46, 53, 21, 10, 86, 62, 7, 30, 90, 99, 51, 40, 83, 66, 7, 39, 15, 19, 20,
        89, 20, 70, 16, 49, 29, 30, 34, 37, 50, 05, 81, 20, 73, 0, 00, 05, 70, 05, 66, 25, 73, 27,
        07, 11, 1, 91, 43, 53, 49, 34, 82, 86, 3, 40, 64, 56, 35, 17, 37, 10, 59, 91, 43, 31, 22,
        17, 96, 63, 68, 09, 76, 1, 60, 02, 14, 86, 69, 61, 36, 5, 06, 49, 70, 23, 49, 96, 91, 86,
        58, 00, 03, 71, 70, 98, 78, 80, 2, 86, 17, 02, 63, 99, 66, 3, 31, 2, 31, 45, 99, 89, 97,
        37, 33, 37, 45, 87, 79, 19, 12, 23, 6, 4, 9, 44, 69, 52, 42, 97, 94, 38, 00, 57, 84, 78,
        97, 07, 9, 63, 39, 43, 34, 24, 98, 9, 54, 40, 8, 33, 84, 89, 9, 21, 51, 13, 8, 74, 05, 01,
        65, 48, 01, 54, 39, 13, 18, 65, 7, 78, 34, 5, 65, 80, 80, 3, 55, 06, 36, 45, 98, 84, 89,
        09, 07, 37, 83, 76, 2, 78, 55, 03, 26, 23, 60, 22, 26, 35, 36, 21, 19, 26, 61, 01, 68, 77,
        5, 15, 90, 8, 9, 43, 72, 08, 58, 1, 34, 36, 95, 80, 78, 48, 05, 40, 39, 39, 26, 92, 42, 15,
        68, 9, 22, 86, 1, 14, 99, 7, 00, 59, 22, 47, 03, 87, 12, 11, 13, 87, 5, 69, 75, 37, 02, 88,
        7, 24, 25, 23, 02, 71, 08, 89, 12, 34, 7, 29, 18, 2, 33, 09, 75, 16, 2, 03, 5, 6, 0, 47,
        88, 63, 43, 39, 04, 79, 98, 37, 80, 80, 50, 18, 21, 66, 14, 36, 4, 45, 76, 27, 78, 3, 62,
        5, 14, 60, 70, 62, 52, 64, 50, 18, 14, 1, 69, 77, 12, 39, 5, 33, 39, 71, 66, 07, 14, 35, 9,
        6, 15, 39, 21, 9, 77, 97, 56, 07, 42, 8, 74, 59, 60, 8, 43, 87, 18, 71, 08, 49, 07, 70, 68,
        4, 02, 05, 35, 43, 71, 41, 19, 69, 81, 44, 59, 64, 24, 3, 23, 74, 84, 96, 19, 79, 94, 68,
        45,
    ];
    for i in vec {
        mm1.add_num(i);
        mm2.add_num(i);
        mm3.add_num(i);

        assert_eq!(mm1.find_median(), mm2.find_median());
        assert_eq!(mm1.find_median(), mm3.find_median());
    }
}
const MAX_N: usize = 1000;
#[test]
fn test_insert(){
    let mut m = super::five::use_insertion::MedianFinder::new();
    let vec = vec![
        8, 51, 58, 58, 29, 80, 34, 29, 40, 35, 35, 16, 50, 37, 90, 98, 59, 93, 85, 14, 1, 83, 06,
        49, 71, 74, 30, 22, 17, 59, 06, 00, 96, 29, 50, 11, 16, 71, 8, 19, 32, 29, 01, 18, 3, 68,
        47, 02, 03, 84, 06, 69, 23, 8, 9, 21, 61, 44, 28, 21, 78, 32, 05, 2, 59, 08, 11, 91, 37,
        76, 4, 6, 54, 77, 50, 32, 64, 91, 67, 58, 31, 87, 23, 74, 21, 82, 3, 77, 95, 59, 49, 0, 95,
        95, 14, 4, 84, 8, 27, 4, 09, 83, 9, 34, 27, 30, 09, 68, 5, 42, 80, 21, 89, 03, 4, 86, 75,
        04, 21, 81, 09, 78, 80, 94, 87, 18, 61, 19, 55, 36, 87, 50, 09, 86, 99, 89, 5, 4, 16, 07,
        80, 27, 86, 35, 33, 72, 63, 49, 50, 16, 29, 07, 27, 06, 95, 37, 69, 85, 46, 06, 22, 15, 40,
        66, 17, 72, 40, 85, 39, 92, 83, 73, 88, 30, 95, 17, 21, 46, 63, 13, 11, 90, 51, 21, 6, 99,
        9, 42, 44, 7, 70, 14, 6, 38, 79, 70, 87, 13, 70, 46, 47, 81, 57, 82, 12, 88, 6, 76, 81, 4,
        61, 70, 50, 32, 92, 53, 82, 68, 33, 75, 86, 69, 02, 66, 43, 46, 4, 12, 40, 97,].repeat(MAX_N);
    let start = Instant::now();
    for i in vec {
        m.add_num(i);
        if i == 1{
            m.find_median();
        }
    }
    let end = Instant::now();
    println!("insert {:?}", end.duration_since(start));
}
#[test]
fn test_median_finder(){
    let mut m = super::five::MedianFinder::new();
    let vec = vec![
        8, 51, 58, 58, 29, 80, 34, 29, 40, 35, 35, 16, 50, 37, 90, 98, 59, 93, 85, 14, 1, 83, 06,
        49, 71, 74, 30, 22, 17, 59, 06, 00, 96, 29, 50, 11, 16, 71, 8, 19, 32, 29, 01, 18, 3, 68,
        47, 02, 03, 84, 06, 69, 23, 8, 9, 21, 61, 44, 28, 21, 78, 32, 05, 2, 59, 08, 11, 91, 37,
        76, 4, 6, 54, 77, 50, 32, 64, 91, 67, 58, 31, 87, 23, 74, 21, 82, 3, 77, 95, 59, 49, 0, 95,
        95, 14, 4, 84, 8, 27, 4, 09, 83, 9, 34, 27, 30, 09, 68, 5, 42, 80, 21, 89, 03, 4, 86, 75,
        04, 21, 81, 09, 78, 80, 94, 87, 18, 61, 19, 55, 36, 87, 50, 09, 86, 99, 89, 5, 4, 16, 07,
        80, 27, 86, 35, 33, 72, 63, 49, 50, 16, 29, 07, 27, 06, 95, 37, 69, 85, 46, 06, 22, 15, 40,
        66, 17, 72, 40, 85, 39, 92, 83, 73, 88, 30, 95, 17, 21, 46, 63, 13, 11, 90, 51, 21, 6, 99,
        9, 42, 44, 7, 70, 14, 6, 38, 79, 70, 87, 13, 70, 46, 47, 81, 57, 82, 12, 88, 6, 76, 81, 4,
        61, 70, 50, 32, 92, 53, 82, 68, 33, 75, 86, 69, 02, 66, 43, 46, 4, 12, 40, 97,].repeat(MAX_N);
    let start = Instant::now();
    for i in vec {
        m.add_num(i);
        if i == 1{
            m.find_median();
        }
    }
    let end = Instant::now();
    println!("bucket {:?}", end.duration_since(start));
}

#[test]
fn test_use_btree(){
    let mut m = super::five::use_btree_map::MedianFinder::new();
    let vec = vec![
        8, 51, 58, 58, 29, 80, 34, 29, 40, 35, 35, 16, 50, 37, 90, 98, 59, 93, 85, 14, 1, 83, 06,
        49, 71, 74, 30, 22, 17, 59, 06, 00, 96, 29, 50, 11, 16, 71, 8, 19, 32, 29, 01, 18, 3, 68,
        47, 02, 03, 84, 06, 69, 23, 8, 9, 21, 61, 44, 28, 21, 78, 32, 05, 2, 59, 08, 11, 91, 37,
        76, 4, 6, 54, 77, 50, 32, 64, 91, 67, 58, 31, 87, 23, 74, 21, 82, 3, 77, 95, 59, 49, 0, 95,
        95, 14, 4, 84, 8, 27, 4, 09, 83, 9, 34, 27, 30, 09, 68, 5, 42, 80, 21, 89, 03, 4, 86, 75,
        04, 21, 81, 09, 78, 80, 94, 87, 18, 61, 19, 55, 36, 87, 50, 09, 86, 99, 89, 5, 4, 16, 07,
        80, 27, 86, 35, 33, 72, 63, 49, 50, 16, 29, 07, 27, 06, 95, 37, 69, 85, 46, 06, 22, 15, 40,
        66, 17, 72, 40, 85, 39, 92, 83, 73, 88, 30, 95, 17, 21, 46, 63, 13, 11, 90, 51, 21, 6, 99,
        9, 42, 44, 7, 70, 14, 6, 38, 79, 70, 87, 13, 70, 46, 47, 81, 57, 82, 12, 88, 6, 76, 81, 4,
        61, 70, 50, 32, 92, 53, 82, 68, 33, 75, 86, 69, 02, 66, 43, 46, 4, 12, 40, 97,].repeat(MAX_N);
    let start = Instant::now();
    for i in vec {
        m.add_num(i);
        if i == 1{
            m.find_median();
        }
    }
    let end = Instant::now();
    println!("btree {:?}", end.duration_since(start));
}

#[test]
fn get_hint() {
    use super::nine;
    assert_eq!(
        nine::get_hint(String::from("1807"), String::from("7810")),
        String::from("1A3B")
    );
    assert_eq!(
        nine::get_hint(String::from("11"), String::from("11")),
        String::from("2A0B")
    );
}
